service: yourservice #configurar o nome do seu serviço
app: yourapp #configurar o nome do seu app
org: yourorganization #configurar o nome da sua organização

provider:
  name: aws
  runtime: python3.7
  region: sa-east-1
  stage: dev
  environment:
    PODCAST_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

functions:
  podcastRegister:
    handler: podcast_register.main
    events:
      - s3:
          bucket: yourpodcastbucket #configurar o nome do seu bucket S3
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp3
  podcastRss:
    handler: podcast_rss.main
    events:
      - http:
          path: podcasts/rss
          method: get

resources:
  Resources:
    PodcastDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.PODCAST_TABLE}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    dockerFile: ./Dockerfile